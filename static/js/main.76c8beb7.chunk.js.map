{"version":3,"sources":["Components/Timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","toggle","buttonName","startTime","Date","now","timer","reset","handleClick","bind","this","startTimer","setInterval","e","setState","clearInterval","preventDefault","target","className","centiseconds","Math","floor","slice","seconds","minutes","hours","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPA+EeA,G,kBAlEX,WAAaC,GAAQ,IAAD,8BAChB,4CAAMA,KATVC,MAAQ,CACJC,QAAQ,EACRC,WAAY,CAAC,QAAQ,SACrBC,UAAWC,KAAKC,MAChBC,MAAO,EACPC,OAAO,GAKP,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAFH,E,iFAKC,IAAD,OAChBC,KAAKC,WAAaC,aAAY,SAACC,GACvB,EAAKb,MAAMC,QACX,EAAKa,UAAS,SAACd,GACX,MAAO,CAACM,MAAQF,KAAKC,MAAQL,EAAMG,gBAG5C,K,6CAIHY,cAAcL,KAAKC,c,kCAGXE,GAGR,OAFAA,EAAEG,iBAEMH,EAAEI,OAAOC,WACb,IAAM,qBACFR,KAAKI,UAAS,SAACd,GACX,MAAO,CAACC,QAASD,EAAMC,OACfE,UAAWH,EAAMO,MAAQH,KAAKC,MAAQL,EAAMG,UAC5CI,OAAO,MAEnB,MACJ,IAAM,qBACFG,KAAKI,UAAS,SAACd,GACX,MAAO,CAACO,OAAO,EACPD,MAAO,S,+BAOrB,IAAD,OACDa,GAAgB,IAAOC,KAAKC,MAAMX,KAAKV,MAAMM,MAAQ,KAAMgB,OAAO,GAClEC,GAAW,IAAOH,KAAKC,MAAMX,KAAKV,MAAMM,MAAQ,KAAQ,IAAKgB,OAAO,GACpEE,GAAW,IAAOJ,KAAKC,MAAMX,KAAKV,MAAMM,MAAQ,KAAS,IAAKgB,OAAO,GACrEG,GAAS,IAAML,KAAKC,MAAMX,KAAKV,MAAMM,MAAQ,OAAWgB,OAAO,GAEnE,OACI,yBAAKJ,UAAU,SACX,wBAAIA,UAAU,iBACTO,EADL,IACaD,EADb,IACuBD,EADvB,IACiCJ,GAEjC,yBAAKD,UAAU,0BACX,4BAAQA,UAAU,qBACVQ,QAAS,SAACb,GAAD,OAAO,EAAKL,YAAYK,KAC5BH,KAAKV,MAAME,WAAWQ,KAAKV,MAAMC,OAAS,EAAI,IAE3D,4BAAQiB,UAAU,qBACVQ,QAAS,SAACb,GAAD,OAAO,EAAKL,YAAYK,KADzC,e,GAlEAc,IAAMC,YCEXC,EAFH,kBAAM,kBAAC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.76c8beb7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Timer.css';\r\n\r\nclass Timer extends React.Component {\r\n\r\n    state = {\r\n        toggle: false,\r\n        buttonName: [\"Start\",\"Pause\"],\r\n        startTime: Date.now(),\r\n        timer: 0,\r\n        reset: true\r\n    }\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startTimer = setInterval((e) => {\r\n            if (this.state.toggle) {\r\n                this.setState((state) => {\r\n                    return {timer: (Date.now() - state.startTime)}\r\n                });\r\n            }\r\n        }, 1);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.startTimer);\r\n    }\r\n\r\n    handleClick(e) {\r\n        e.preventDefault();\r\n\r\n        switch (e.target.className) {\r\n            case (\"timer-button start\"):\r\n                this.setState((state) => {\r\n                    return {toggle: !state.toggle,\r\n                            startTime: state.reset ? Date.now() : state.startTime,\r\n                            reset: false}\r\n                });\r\n                break;\r\n            case (\"timer-button reset\"):\r\n                this.setState((state) => {\r\n                    return {reset: true,\r\n                            timer: 0}\r\n                });\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let centiseconds = (\"0\" + (Math.floor(this.state.timer / 10))).slice(-2);\r\n        let seconds = (\"0\" + (Math.floor(this.state.timer / 1000) % 60)).slice(-2);\r\n        let minutes = (\"0\" + (Math.floor(this.state.timer / 60000) % 60)).slice(-2);\r\n        let hours = (\"0\" + Math.floor(this.state.timer / 36000000)).slice(-2);\r\n\r\n        return(\r\n            <div className=\"timer\">\r\n                <h1 className=\"timer-display\">\r\n                    {hours}:{minutes}:{seconds}:{centiseconds}\r\n                </h1>\r\n                <div className=\"timer-button-container\">\r\n                    <button className=\"timer-button start\"\r\n                            onClick={(e) => this.handleClick(e)}>\r\n                                {this.state.buttonName[this.state.toggle ? 1 : 0]}\r\n                    </button>\r\n                    <button className=\"timer-button reset\"\r\n                            onClick={(e) => this.handleClick(e)}>\r\n                                Reset\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport Timer from './Components/Timer/Timer';\r\n\r\nconst App = () => <Timer />;\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}