{"version":3,"sources":["Components/Stopwatch/Stopwatch.js","Components/Cards/Cards.js","Components/Timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Stopwatch","state","toggle","buttonName","startTime","dateTime","Date","now","timer","reset","handleStartClick","bind","handleResetClick","this","startTimer","setInterval","e","setState","clearInterval","preventDefault","centiseconds","Math","floor","slice","seconds","minutes","hours","className","onClick","React","Component","Cards","props","children","Timer","timeQueue","value","index","handleKeyPress","handleChange","onSubmit","Notification","permission","requestPermission","then","length","isNaN","parseInt","push","checkIfNum","undefined","key","keyCode","target","name","type","placeholder","onChange","onKeyDown","map","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34ed2f31.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Stopwatch.css';\r\n\r\n/**\r\n * Stopwatch component\r\n * @author Eric Han\r\n */\r\nclass Stopwatch extends React.Component {\r\n\r\n    state = {\r\n        /** Indicates if timer is running */\r\n        toggle: false,\r\n        /** Changes name of button depending on toggle state */\r\n        buttonName: [\"Start\",\"Pause\"],\r\n        /** Initializes the start time since pressing the button */\r\n        startTime: 0,\r\n        dateTime: Date.now(),\r\n        /** Tracks time passed */\r\n        timer: 0,\r\n        /** Differentiates pause from reset */\r\n        reset: true\r\n    }\r\n\r\n    /** Binds functions */\r\n    constructor () {\r\n        super();\r\n        this.handleStartClick = this.handleStartClick.bind(this);\r\n        this.handleResetClick = this.handleResetClick.bind(this);\r\n    }\r\n\r\n    /** Mounts the startTimer function */\r\n    componentDidMount() {\r\n\r\n        /** Runs every 1 ms */\r\n        this.startTimer = setInterval((e) => {\r\n\r\n            /* Checks if timer should be on */\r\n            if (this.state.toggle) {\r\n                this.setState((state) => {\r\n                    return {timer: state.startTime + (Date.now() - state.dateTime)}\r\n                });\r\n            }\r\n        }, 1);\r\n    }\r\n\r\n    /** Unmounts the startTime */\r\n    componentWillUnmount() {\r\n        clearInterval(this.startTimer);\r\n    }\r\n\r\n    /** Activates when start/pause is clicked */\r\n    handleStartClick(e) {\r\n        e.preventDefault();\r\n\r\n        /* Runs the startTime function */\r\n        this.setState((state) => {\r\n                return{toggle: !state.toggle,\r\n                    dateTime: Date.now(),\r\n                    startTime: state.reset ? 0 : state.timer,\r\n                    reset: false}\r\n        });\r\n    }\r\n\r\n    /** Activates when reset is clicked */\r\n    handleResetClick(e) {\r\n        e.preventDefault();\r\n\r\n        /* Resets the timer back to 0 */\r\n        this.setState(() => {\r\n            return {reset: true,\r\n                    startTime: Date.now(),\r\n                    toggle: false,\r\n                    timer: 0}\r\n        });\r\n    }\r\n\r\n    render() {\r\n        /* Makes the timer display all nice and pretty */\r\n        let centiseconds = (\"0\" + (Math.floor(this.state.timer / 10))).slice(-2);\r\n        let seconds = (\"0\" + (Math.floor(this.state.timer / 1000) % 60)).slice(-2);\r\n        let minutes = (\"0\" + (Math.floor(this.state.timer / 60000) % 60)).slice(-2);\r\n        let hours = (\"0\" + Math.floor(this.state.timer / 36000000)).slice(-2);\r\n\r\n        return(\r\n            <div className=\"stopwatch\">\r\n                <h1 className=\"stopwatch-display\">\r\n                    {hours}:{minutes}:{seconds}:{centiseconds}\r\n                </h1>\r\n                <div className=\"stopwatch-button-container\">\r\n                    <button className=\"stopwatch-button start\"\r\n                            onClick={(e) => this.handleStartClick(e)}>\r\n                                {this.state.buttonName[this.state.toggle ? 1 : 0]}\r\n                    </button>\r\n                    <button className=\"stopwatch-button reset\"\r\n                            onClick={(e) => this.handleResetClick(e)}>\r\n                                Reset\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Stopwatch;","import React from 'react';\r\nimport './Cards.css';\r\n\r\nconst Cards = props =>  <div className=\"cards\">\r\n                            <h1 className=\"time-names\">{props.children}</h1>\r\n                        </div>\r\n\r\nexport default Cards;","import React from 'react';\r\nimport './Timer.css';\r\nimport Cards from './../Cards/Cards';\r\n\r\n/**\r\n * Timer component\r\n * @author Eric Han\r\n */\r\nclass Timer extends React.Component {\r\n\r\n    state = {\r\n        /** Indicates if timer is running */\r\n        toggle: false,\r\n        /** Changes name of button depending on toggle state */\r\n        buttonName: [\"Start\",\"Pause\"],\r\n        /** Initializes the start time since pressing the button */\r\n        startTime: 0,\r\n        /** Queue of times */\r\n        timeQueue: [],\r\n        /** Time value */\r\n        value: \"\",\r\n        /** Index of timer */\r\n        index: 0,\r\n        /** Initializes the start time in Date.now() since pressing the button */\r\n        dateTime: Date.now(),\r\n        /** Tracks time passed */\r\n        timer: 0,\r\n        /** Differentiates pause from reset */\r\n        reset: true\r\n    }\r\n\r\n    /** Binds functions */\r\n    constructor (props) {\r\n        super(props);\r\n        this.handleStartClick = this.handleStartClick.bind(this);\r\n        this.handleResetClick = this.handleResetClick.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    } \r\n\r\n    /** Mounts the startTimer function */\r\n    componentDidMount() {\r\n\r\n        /** Runs every 1 ms */\r\n        this.startTimer = setInterval((e) => {\r\n\r\n            /* Checks if timer should be on */\r\n            if (this.state.toggle) {\r\n                this.setState((state) => {\r\n                    if (state.timer >= 0) return {timer: state.startTime - (Date.now() - state.dateTime)}\r\n                    else {\r\n                        if (Notification.permission === \"granted\")\r\n                            var notification = new Notification(\"Time's up!\");\r\n                        else if (Notification.permission !== \"denied\") {\r\n                            Notification.requestPermission().then(function (permission) {\r\n                                if (permission === \"granted\") {\r\n                                    var notification = new Notification(\"Time's up!\");\r\n                                }\r\n                            });\r\n                        }\r\n                        return {toggle:false,\r\n                                reset:true,\r\n                                index:(state.index + 1) % state.timeQueue.length,\r\n                                timer: state.timeQueue[state.index]}\r\n                    }\r\n                });\r\n            }\r\n        }, 1);\r\n    }\r\n\r\n    /** Unmounts the startTime */\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n    \r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        this.setState((state) => {\r\n            if (isNaN(parseInt(state.value)) || parseInt(state.value) <= 0) return;\r\n            else {\r\n                state.timeQueue.push(parseInt(state.value));\r\n                return {timeQueue: state.timeQueue,\r\n                        value:\"\"}\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Activates when start/pause is clicked */\r\n    handleStartClick(e) {\r\n        e.preventDefault();\r\n\r\n        /* Runs the startTime function */\r\n        this.setState((state) => {\r\n            return {dateTime: Date.now(),\r\n                    startTime: state.reset ? state.timeQueue[state.index]*1000 : state.timer,\r\n                    toggle: !state.toggle,\r\n                    reset: false\r\n                }\r\n        });\r\n    }\r\n\r\n    /** Activates when reset is clicked */\r\n    handleResetClick(e) {\r\n        e.preventDefault();\r\n\r\n        /* Resets the timer back to 0 */\r\n        this.setState(() => {\r\n            return {reset: true,\r\n                    dateTime: Date.now(),\r\n                    toggle: false,\r\n                    timer: 0,\r\n                    index: this.state.index + 1}\r\n        });\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        let checkIfNum = true;\r\n        if (e.key !== undefined || e.keyCode !== undefined) {\r\n          // Check if it's a \"e\", \".\", \"+\" or \"-\"\r\n          checkIfNum =  e.key === \"e\" || e.key === \".\" || e.key === \"+\" || e.key === \"-\" ||\r\n                        e.keyCode === 69 || e.keyCode === 190 || e.keyCode === 187 || e.keyCode === 189;\r\n        }\r\n        return checkIfNum && e.preventDefault();\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({value: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        /* WOW! Look at how nice and pretty the timer display is because of the following four lines */\r\n        let centiseconds = (\"0\" + (Math.floor(this.state.timer / 10))).slice(-2);\r\n        let seconds = (\"0\" + (Math.floor(this.state.timer / 1000) % 60)).slice(-2);\r\n        let minutes = (\"0\" + (Math.floor(this.state.timer / 60000) % 60)).slice(-2);\r\n        let hours = (\"0\" + Math.floor(this.state.timer / 36000000)).slice(-2);\r\n\r\n        return(\r\n            <div className=\"timer\">\r\n                <h1 className=\"stopwatch-display\">\r\n                    {hours}:{minutes}:{seconds}:{centiseconds}\r\n                </h1>\r\n                <form className=\"timer-form\"\r\n                    onSubmit={(e) => this.onSubmit(e)}>\r\n                    <input className=\"timer-input\"\r\n                        name=\"time\"\r\n                        type=\"number\"\r\n                        placeholder=\"00:00:00\"\r\n                        onChange={this.handleChange}\r\n                        onKeyDown={(e) => this.handleKeyPress(e)}/>\r\n                        <button className=\"timer-add-time\"\r\n                                type=\"submit\"\r\n                                onSubmit={(e) => this.onSubmit(e)}>\r\n                                    Add Time\r\n                        </button>\r\n                </form>\r\n                <div className=\"timer-button-container\">\r\n                    <button className=\"timer-button start\"\r\n                            onClick={(e) => this.handleStartClick(e)}>\r\n                                {this.state.buttonName[this.state.toggle ? 1 : 0]}\r\n                    </button>\r\n                    <button className=\"timer-button reset\"\r\n                            onClick={(e) => this.handleResetClick(e)}>\r\n                                Reset\r\n                    </button>\r\n                </div>\r\n                <div className=\"timer-time-container\">\r\n                    {this.state.timeQueue.map(timeQueue => <Cards>{timeQueue}</Cards>)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport Stopwatch from './Components/Stopwatch/Stopwatch';\r\nimport Timer from './Components/Timer/Timer';\r\nimport './Styles/index.css'\r\n\r\nconst App = () => (\r\n    <div>\r\n        <div className=\"container\">\r\n            <h1>Stopwatch</h1>\r\n            <Stopwatch />\r\n        </div>\r\n        <div className=\"container\">\r\n            <h1>Timer</h1>\r\n            <Timer />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}